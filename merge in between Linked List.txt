/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeInBetween(ListNode list1, int a, int b, ListNode list2) {
        ListNode temp=list1;
        ListNode dummyHead=new ListNode(0);
        ListNode head=dummyHead;

        for(int i=0;i<a;i++){
            head.next=new ListNode(temp.val);
            temp=temp.next;
            head=head.next;
        }

        ListNode temp2=list2;
        while(temp2!=null){
            head.next=new ListNode(temp2.val);
            temp2=temp2.next;
            head=head.next;
        }

        ListNode temp1=list1;

        for(int i=0;i<=b;i++){
            temp1=temp1.next;
        }

        while(temp1!=null){
            head.next=new ListNode(temp1.val);
            temp1=temp1.next;
            head=head.next;
        }

        return dummyHead.next;
    }
}

//leetcode problem 1669