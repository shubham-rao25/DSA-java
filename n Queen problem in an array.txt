

public class Main
{
    public static int N=8;
    
    public static void printSolution(int board[][]){
        for(int  i=0;i<board.length;i++){
            for(int j=0;j<board[0].length;j++){
                if(board[i][j]==1){
                    System.out.print('Q');
                }else{
                    System.out.print('.');
                }
            }
            System.out.println();
        }
    }
    
    public static boolean isSafe(int board[][],int row, int col){
        int x,y;
        //check in the entire row
        for(int i=0;i<col;i++){
            if(board[row][i]==1){
                return false;
            }
        }
        //check upper diagonal on the left Side
        for(x=row,y=col;x>=0&&y>=0;x--,y--){
            if(board[x][y]==1){
                return false;
            }
        }
        
        //check Lower diagonal on the left Side
        for(x=row,y=col;y>=0&&x<N;x++,y--){
            if(board[x][y]==1){
                return false;
            }
        }
        return true;
    }
    public static boolean solveNQ(int board[][], int col){
        if(col>=N){
            return true;
        }
        for(int i=0;i<N;i++){
            
            if(isSafe(board,i,col)){
               board[i][col]=1;
               if(solveNQ(board,col+1)==true){
                   return true;
               }
               board[i][col]=0;
            }
        }
        return false;
    }
    public static boolean solve(){
    int board[][] = { { 0, 0, 0, 0, 0, 0, 0, 0 },
                          { 0, 0, 0, 0, 0, 0, 0, 0 },
                          { 0, 0, 0, 0, 0, 0, 0, 0 },
                          { 0, 0, 0, 0, 0, 0, 0, 0 },
                          { 0, 0, 0, 0, 0, 0, 0, 0 },
                          { 0, 0, 0, 0, 0, 0, 0, 0 },
                        { 0, 0, 0, 0, 0, 0, 0, 0 },
                        { 0, 0, 0, 0, 0, 0, 0, 0 } 
    };
 
        if (solveNQ(board, 0) == false) {
            System.out.print("Solution does not exist");
            return false;
        }
 
        printSolution(board);
        return true;
    }
	public static void main(String[] args) {
	    Main queen=new Main();
	    queen.solve();
	}
}
