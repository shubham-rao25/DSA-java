/************************************************************

 Following is the Binary Tree node structure:

 class TreeNode {
     int data;
     TreeNode left;
     TreeNode right;

     TreeNode(int data) {
         this.data = data;
         this.left = null;
         this.right = null;
     }
 }

 ************************************************************/

import java.util.ArrayList;
import java.util.List;

// import javax.swing.tree.TreeNode;

public class Solution {
    public static boolean isLeaf(TreeNode root){
        
        return (root.left==null && root.right==null);
    }
    public static void addLeftBoundary(TreeNode root, List<Integer> ans){
        TreeNode temp=root.left;
        while(temp!=null){
            if(isLeaf(temp)==false){
                ans.add(temp.data);
            }
            if(temp.left!=null){
                temp=temp.left;
            }else{
                temp=temp.right;
            }
        }
    }
    
    public static void addRightBoundary(TreeNode root, List<Integer> ans){
        TreeNode temp=root.right;
        List<Integer> res=new ArrayList<>();
        while(temp!=null){
            if(isLeaf(temp)==false){
                res.add(temp.data);
            }
            if(temp.right!=null){
                temp=temp.right;
            }else{
                temp=temp.left;
            }

            
        }
        for(int i=res.size()-1;i>=0;i--){
                ans.add(res.get(i));
            }
    }

    public static void addLeaves(TreeNode root,List<Integer> ans){
        if(isLeaf(root)==true){
            ans.add(root.data);
            return;
        }

        if(root.left!=null){
            addLeaves(root.left, ans);
        }
        if(root.right!=null){
            addLeaves(root.right, ans);
        }
    }
    public static List<Integer> traverseBoundary(TreeNode root){
        // Write your code here.

        List<Integer> ans=new ArrayList<>();
        if(root==null){
            return ans;
        }
        if(isLeaf(root)==false){
            ans.add(root.data);
        }

        addLeftBoundary(root,ans);
        addLeaves(root,ans);
        addRightBoundary(root,ans);
        return ans;
    }
}