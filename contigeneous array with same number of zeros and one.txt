class Solution {
    public int findMaxLength(int[] nums) {
       //approach-1(451 testcases were passed)
	   // int zero=0;
        // int one=0;
        // for(int i=0;i<nums.length;i++){
        //     if(nums[i]==0){
        //         zero++;
        //     }
        //     if(nums[i]==1){
        //         one++;
        //     }
        // }
        // int res=(zero<one?zero:one);
        // return res*2;
		
		
		// // approach 2-(correct approach- time limit exceeded)
        // // int max=0;
        // // for(int i=0;i<nums.length;i++){
        // //     int zero=0;
        // //     int one=0;
        // //     for(int j=i;j<nums.length;j++){
        // //         if(nums[j]==0){
        // //             zero++;
        // //         }
        // //         if(nums[j]==1){
        // //             one++;
        // //         }
        // //         if(one==zero){
        // //             max=Math.max(max,j-i+1);
        // //         }
        // //     }
        // // }
        // // return max;
        int left = 0, right = 0, len = nums.length;
        for(int indx = 0; indx < len; indx++){
           if(nums[indx] == 0) 
            nums[indx]  = -1;
        }
        int prefSum = 0;
        Map<Integer, Integer> prefSumIndxMp = new HashMap<>();
        prefSumIndxMp.put(0, -1);
        int maxSubLen = 0;
        for(int indx = 0; indx < len; indx++){
            prefSum += nums[indx];
            if(prefSumIndxMp.containsKey(prefSum - 0)){
                maxSubLen = Math.max(maxSubLen, indx - prefSumIndxMp.get(prefSum - 0));
            }
            if(!prefSumIndxMp.containsKey(prefSum)) prefSumIndxMp.put(prefSum, indx);
        }
        return maxSubLen;
    }
}