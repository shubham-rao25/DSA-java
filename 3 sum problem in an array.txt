class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
       HashSet<List<Integer>> hs=new HashSet<>();
       for(int i=0;i<nums.length;i++){
        HashSet<Integer> hash=new HashSet<>();
        for(int j=i+1;j<nums.length;j++){
            int target=0-(nums[i]+nums[j]);
            if(hash.contains(target)){
                List<Integer> list=Arrays.asList(nums[i],nums[j],target);
                Collections.sort(list);
                hs.add(list);
            }
            hash.add(nums[j]);
            

        }
       }
       
        List<List<Integer>> l=new ArrayList<>(hs);
        return l;
    }
}
//leetcode problem 15
(approach using two loops)


//brute force approach for the same using three loops




import java.util.*;

public class Solution {
    public static List<List<Integer>> threeSum(int n, int[] arr) {
        Set<List<Integer>> st = new HashSet<>();

        // check all possible triplets:
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                for (int k = j + 1; k < n; k++) {
                    if (arr[i] + arr[j] + arr[k] == 0) {
                        List<Integer> temp = Arrays.asList(arr[i], arr[j], arr[k]);
                        temp.sort(null);
                        st.add(temp);
                    }
                }
            }
        }

        // store the set elements in the answer:
        List<List<Integer>> ans = new ArrayList<>(st);
        return ans;
    }
}
