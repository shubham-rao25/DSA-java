/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
         ListNode dummyHead = new ListNode(0);
        ListNode head = dummyHead;
        ListNode temp1 = list1;
        ListNode temp2 = list2;

        while (temp1 != null && temp2 != null) {
            if (temp1.val < temp2.val) {
                head.next = new ListNode(temp1.val);
                head = head.next;
                temp1 = temp1.next;
            } else if (temp1.val > temp2.val) {
                head.next = new ListNode(temp2.val);
                head = head.next;
                temp2 = temp2.next;
            } else {
                head.next = new ListNode(temp1.val);
                head = head.next;
                head.next = new ListNode(temp2.val);
                head = head.next;
                temp1 = temp1.next;
                temp2 = temp2.next;
            }
        }

        // Handle remaining elements in list1 or list2
        while (temp1 != null) {
            head.next = new ListNode(temp1.val);
            head = head.next;
            temp1 = temp1.next;
        }

        while (temp2 != null) {
            head.next = new ListNode(temp2.val);
            head = head.next;
            temp2 = temp2.next;
        }

        return dummyHead.next;
    }
}